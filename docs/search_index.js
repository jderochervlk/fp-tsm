(function () {
  window.DENO_DOC_SEARCH_INDEX = {"kind":"search","nodes":[{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"None","file":"Option","doc":"","url":"./Option/~/None.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"None._tag","file":"Option","doc":"","url":"./Option/~/None._tag.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Option","file":"Option","doc":"The `Option` data type represents optional values. An `Option<A>` can either\nbe `Some<A>`, containing a value of type `A`, or `None`, representing the\nabsence of a value.\n\n**When to Use**\n\nYou can use `Option` in scenarios like:\n\n- Using it for initial values\n- Returning values from functions that are not defined for all possible\n  inputs (referred to as “partial functions”)\n- Managing optional fields in data structures\n- Handling optional function arguments\n","url":"./Option/~/Option.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"Some","file":"Option","doc":"","url":"./Option/~/Some.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Some._tag","file":"Option","doc":"","url":"./Option/~/Some._tag.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Some.value","file":"Option","doc":"","url":"./Option/~/Some.value.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"of","file":"Option","doc":"Create an `Option`.\n\nReturns `None` if the value is `null` or `undefined`, otherwise wraps the value in a `Some`.\n","url":"./Option/~/of.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"flow","file":"function","doc":"Performs left-to-right function composition. The first argument may have any arity, the remaining arguments must be unary.\n","url":"./function/~/flow.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"pipe","file":"function","doc":"Pipes the value of an expression into a pipeline of functions.\n\nSee also [`flow`](#flow).\n","url":"./function/~/pipe.html","deprecated":false}]};
})()